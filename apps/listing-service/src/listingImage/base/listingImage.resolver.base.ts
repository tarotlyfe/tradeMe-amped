/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ListingImage } from "./ListingImage";
import { ListingImageCountArgs } from "./ListingImageCountArgs";
import { ListingImageFindManyArgs } from "./ListingImageFindManyArgs";
import { ListingImageFindUniqueArgs } from "./ListingImageFindUniqueArgs";
import { CreateListingImageArgs } from "./CreateListingImageArgs";
import { UpdateListingImageArgs } from "./UpdateListingImageArgs";
import { DeleteListingImageArgs } from "./DeleteListingImageArgs";
import { ListingFindManyArgs } from "../../listing/base/ListingFindManyArgs";
import { Listing } from "../../listing/base/Listing";
import { ListingImageService } from "../listingImage.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ListingImage)
export class ListingImageResolverBase {
  constructor(
    protected readonly service: ListingImageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _listingImagesMeta(
    @graphql.Args() args: ListingImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @Public()
  @graphql.Query(() => [ListingImage])
  async listingImages(
    @graphql.Args() args: ListingImageFindManyArgs
  ): Promise<ListingImage[]> {
    return this.service.listingImages(args);
  }

  @Public()
  @graphql.Query(() => ListingImage, { nullable: true })
  async listingImage(
    @graphql.Args() args: ListingImageFindUniqueArgs
  ): Promise<ListingImage | null> {
    const result = await this.service.listingImage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ListingImage)
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "create",
    possession: "any",
  })
  async createListingImage(
    @graphql.Args() args: CreateListingImageArgs
  ): Promise<ListingImage> {
    return await this.service.createListingImage({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ListingImage)
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "update",
    possession: "any",
  })
  async updateListingImage(
    @graphql.Args() args: UpdateListingImageArgs
  ): Promise<ListingImage | null> {
    try {
      return await this.service.updateListingImage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ListingImage)
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "delete",
    possession: "any",
  })
  async deleteListingImage(
    @graphql.Args() args: DeleteListingImageArgs
  ): Promise<ListingImage | null> {
    try {
      return await this.service.deleteListingImage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => [Listing], { name: "listing" })
  async findListing(
    @graphql.Parent() parent: ListingImage,
    @graphql.Args() args: ListingFindManyArgs
  ): Promise<Listing[]> {
    const results = await this.service.findListing(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
