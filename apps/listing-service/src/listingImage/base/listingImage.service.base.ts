/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ListingImage, // @ts-ignore
  Listing,
} from "@prisma/client";

export class ListingImageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ListingImageCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListingImageCountArgs>
  ): Promise<number> {
    return this.prisma.listingImage.count(args);
  }

  async listingImages<T extends Prisma.ListingImageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListingImageFindManyArgs>
  ): Promise<ListingImage[]> {
    return this.prisma.listingImage.findMany(args);
  }
  async listingImage<T extends Prisma.ListingImageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListingImageFindUniqueArgs>
  ): Promise<ListingImage | null> {
    return this.prisma.listingImage.findUnique(args);
  }
  async createListingImage<T extends Prisma.ListingImageCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListingImageCreateArgs>
  ): Promise<ListingImage> {
    return this.prisma.listingImage.create<T>(args);
  }
  async updateListingImage<T extends Prisma.ListingImageUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListingImageUpdateArgs>
  ): Promise<ListingImage> {
    return this.prisma.listingImage.update<T>(args);
  }
  async deleteListingImage<T extends Prisma.ListingImageDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListingImageDeleteArgs>
  ): Promise<ListingImage> {
    return this.prisma.listingImage.delete(args);
  }

  async findListing(
    parentId: string,
    args: Prisma.ListingFindManyArgs
  ): Promise<Listing[]> {
    return this.prisma.listingImage
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .listing(args);
  }
}
