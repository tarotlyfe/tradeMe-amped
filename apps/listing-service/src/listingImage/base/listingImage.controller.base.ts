/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ListingImageService } from "../listingImage.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { ListingImageCreateInput } from "./ListingImageCreateInput";
import { ListingImage } from "./ListingImage";
import { ListingImageFindManyArgs } from "./ListingImageFindManyArgs";
import { ListingImageWhereUniqueInput } from "./ListingImageWhereUniqueInput";
import { ListingImageUpdateInput } from "./ListingImageUpdateInput";
import { ListingFindManyArgs } from "../../listing/base/ListingFindManyArgs";
import { Listing } from "../../listing/base/Listing";
import { ListingWhereUniqueInput } from "../../listing/base/ListingWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ListingImageControllerBase {
  constructor(
    protected readonly service: ListingImageService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ListingImage })
  @swagger.ApiBody({
    type: ListingImageCreateInput,
  })
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createListingImage(
    @common.Body() data: ListingImageCreateInput
  ): Promise<ListingImage> {
    return await this.service.createListingImage({
      data: data,
      select: {
        altText: true,
        createdAt: true,
        id: true,
        order: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @Public()
  @common.Get()
  @swagger.ApiOkResponse({ type: [ListingImage] })
  @ApiNestedQuery(ListingImageFindManyArgs)
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async listingImages(@common.Req() request: Request): Promise<ListingImage[]> {
    const args = plainToClass(ListingImageFindManyArgs, request.query);
    return this.service.listingImages({
      ...args,
      select: {
        altText: true,
        createdAt: true,
        id: true,
        order: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @Public()
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ListingImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async listingImage(
    @common.Param() params: ListingImageWhereUniqueInput
  ): Promise<ListingImage | null> {
    const result = await this.service.listingImage({
      where: params,
      select: {
        altText: true,
        createdAt: true,
        id: true,
        order: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ListingImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: ListingImageUpdateInput,
  })
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateListingImage(
    @common.Param() params: ListingImageWhereUniqueInput,
    @common.Body() data: ListingImageUpdateInput
  ): Promise<ListingImage | null> {
    try {
      return await this.service.updateListingImage({
        where: params,
        data: data,
        select: {
          altText: true,
          createdAt: true,
          id: true,
          order: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ListingImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteListingImage(
    @common.Param() params: ListingImageWhereUniqueInput
  ): Promise<ListingImage | null> {
    try {
      return await this.service.deleteListingImage({
        where: params,
        select: {
          altText: true,
          createdAt: true,
          id: true,
          order: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @common.Get("/:id/listing")
  @ApiNestedQuery(ListingFindManyArgs)
  async findListing(
    @common.Req() request: Request,
    @common.Param() params: ListingImageWhereUniqueInput
  ): Promise<Listing[]> {
    const query = plainToClass(ListingFindManyArgs, request.query);
    const results = await this.service.findListing(params.id, {
      ...query,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        coverImage: true,
        createdAt: true,
        description: true,
        id: true,

        owner: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/listing")
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "update",
    possession: "any",
  })
  async connectListing(
    @common.Param() params: ListingImageWhereUniqueInput,
    @common.Body() body: ListingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      listing: {
        connect: body,
      },
    };
    await this.service.updateListingImage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/listing")
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "update",
    possession: "any",
  })
  async updateListing(
    @common.Param() params: ListingImageWhereUniqueInput,
    @common.Body() body: ListingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      listing: {
        set: body,
      },
    };
    await this.service.updateListingImage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/listing")
  @nestAccessControl.UseRoles({
    resource: "ListingImage",
    action: "update",
    possession: "any",
  })
  async disconnectListing(
    @common.Param() params: ListingImageWhereUniqueInput,
    @common.Body() body: ListingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      listing: {
        disconnect: body,
      },
    };
    await this.service.updateListingImage({
      where: params,
      data,
      select: { id: true },
    });
  }
}
